<?php

namespace App\Orchid\Screens;

use App\Models\Customer;
use App\Models\Product;
use App\Models\Sale;
use App\Models\Saleitem;
use Illuminate\Http\Request;
use Orchid\Platform\Models\User;
use Orchid\Screen\Actions\Button;
use Orchid\Screen\Fields\DateTimer;
use Orchid\Screen\Fields\Group;
use Orchid\Screen\Fields\Input;
use Orchid\Screen\Fields\Matrix;
use Orchid\Screen\Fields\Relation;
use Orchid\Screen\Fields\Select;
use Orchid\Screen\Fields\TextArea;
use Orchid\Screen\Screen;
use Orchid\Support\Facades\Alert;
use Orchid\Support\Facades\Layout;

class SaleEditScreen extends Screen
{
    /**
     * Display header name.
     *
     * @var string
     */
    public $name = 'Create Sales Invoice';

    /**
     * Display header description.
     *
     * @var string
     */
    // public $description = 'Sale Invoice .';

    /**
     * Query data.
     *
     * @return array
     */
    public function query(Sale $sale): array
    {
        $this->exists = $sale->exists;

        if ($this->exists) {
            $this->name = 'Edit Sales Invoice';
        }

        return [
            'sale' => $sale,
        ];
    }

    /**
     * Button commands.
     *
     * @return \Orchid\Screen\Action[]
     */
    public function commandBar(): array
    {
        return [
            Button::make('Save')
                ->icon('pencil')
                ->method('createOrUpdate')
                ->canSee(!$this->exists),

            Button::make('Update')
                ->icon('note')
                ->method('createOrUpdate')
                ->canSee($this->exists),

            Button::make('Delete')
                ->icon('trash')
                ->confirm(__('Are you sure?'))
                ->method('remove')
                ->canSee($this->exists),
        ];
    }

    /**
     * Views.
     *
     * @return \Orchid\Screen\Layout[]|string[]
     */
    public function layout(): array
    {
        return [
            Layout::rows([
                Group::make([
                    Relation::make('sale.user_id')
                        ->fromModel(User::class, 'name')
                        ->title('Select Admin or Branch')
                        ->required()
                        ->help('Admin or Branch who is in charge.'),
                    Input::make('sale.invoice_no')
                        ->title("Invoice No.")
                        ->disabled()
                        ->help("Will be auto generated by system."),
                    DateTimer::make('sale.date')
                        ->title('Date')
                        ->format('Y-m-d')
                        ->help("Invoice issued Date."),
                    Relation::make('sale.customer_id')
                        ->fromModel(Customer::class, 'name')
                        ->title('Choose Customer')
                        ->required()
                        ->help('Choose customer for sale invoice.'),
                ])->fullWidth(),
                Group::make([
                    Matrix::make('items')
                        ->title('Add Invoice Items')
                        ->required()
                        ->columns([
                            'Product Name' => 'product_id', 'Quantity' => 'qty',
                        ])
                        ->fields([
                            'product_id' => Select::make('product_id')
                                ->fromModel(Product::class, 'code')
                                ->required()
                                ->empty('No select')
                                ->placeholder('Choose Product'),
                            'qty' => Input::make('quantity')
                                ->type('number')
                                ->required()
                                ->placeholder('Enter Quantity'),
                        ]),
                ])->fullWidth(),
                Group::make([
                    Select::make('sale.is_cash')
                        ->options([
                            '1' => 'Yes',
                            '0' => 'No',
                        ])
                        ->title('Is Cash Down Payment')
                        ->help('Select whether it is cash down or not.'),
                    Input::make('sale.discount')
                        ->type('number')
                        ->value(0)
                        ->title("Discount Amount")
                        ->placeholder('Enter Discount')
                        ->help("To give discount for the customer."),
                    Select::make('sale.status')
                        ->options([
                            'paid' => 'Paid',
                            'pending' => 'Not Paid Yet',
                        ])
                        ->title('Status')
                        ->help('Select whether it is cash down or not.'),
                    Input::make('sale.received')
                        ->type('number')
                        ->value(0)
                        ->title("Received Amount")
                        ->placeholder('Enter Received')
                        ->help("To save the amount customer paid for this invoice."),
                ])->fullWidth(),
                Group::make([
                    TextArea::make('sale.remarks')
                        ->rows(2)
                        ->title("Remarks")
                        ->placeholder('Write remarks')
                        ->help("To note something bold about this invoice."),
                ])->fullWidth(),

            ]),
            Layout::view('sales.saleitems-table'),
            Layout::rows([
                Button::make(__('Save Invoice'))
                    ->icon('pencil')
                    ->method('createOrUpdate'),
            ]),

        ];
    }

    /**
     * @param Sale $sale
     * @param Request $request
     *
     * @return \Illuminate\Http\RedirectResponse
     */
    public function createOrUpdate(Sale $sale, Request $request)
    {
        // dd($request->all());
        $sale->fill($request->get('sale'))->save();
        if ($sale->user_id == null) {
            $sale->user_id = $request->get('sale')['user_id'];
        }

        if ($request->has('items')) {
            $items = $request->get('items');
            foreach ($items as $item) {
                $saleitem = new Saleitem();
                $saleitem->product_id = $item['product_id'];
                $saleitem->sale_id = $sale->id;
                $saleitem->quantity = $item['qty'];
                $saleitem->save();
                $product = Product::findOrFail($saleitem->product_id);
                $product->quantity = $product->quantity - $saleitem->quantity;
                $product->update();
            }
        }

        if ($request->has('olditems')) {
            $olds = $request->get('olditems');
            foreach ($olds as $old) {
                $olditem = Saleitem::findOrFail($old['id']);
                if ($olditem->quantity != $old['qty']) {
                    $p = Product::findOrFail($olditem->product_id);
                    $p->quantity = $p->quantity + $olditem->quantity;
                    $p->update();
                    $olditem->quantity = $old['qty'];
                    $olditem->update();
                    $p->quantity = $p->quantity - $old['qty'];
                    $p->update();
                }

            }
        }

        $subtotal = 0;

        foreach ($sale->saleitems as $sitem) {
            $item_total = $sitem->product->sale_price * $sitem->quantity;
            $subtotal = $subtotal + $item_total;
        }

        $sale->sub_total = $subtotal;
        $sale->grand_total = $subtotal - $sale->discount;
        if ($sale->invoice_no == null) {
            $sale->invoice_no = '#01' . str_replace("-", "", $sale->date) . $sale->id;
        }
        $sale->update();

        Alert::info('You have updated a sales invoice.');

        return redirect()->route('platform.sale.view', $sale->id);
    }

    /**
     * @param Sale $sale
     *
     * @return \Illuminate\Http\RedirectResponse
     * @throws \Exception
     */
    public function remove(Sale $sale)
    {
        $saleitems = $sale->saleitems;
        if ($saleitems) {
            foreach ($saleitems as $saleitem) {
                $product = Product::findOrFail($saleitem->product_id);
                $product->quantity = $product->quantity + $saleitem->quantity;
                $product->update();
                $saleitem->delete();
            }
        }
        $sale->delete();

        Alert::info('Sale Invoice is deleted successfully. Product Quantity are returning back.');

        return redirect()->route('platform.sale.list');
    }

}
